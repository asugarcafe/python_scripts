Time,Query,dbid,objectid,number,encrypted,text
2024-09-26 11:43:03.597,"CREATE TRIGGER [SE_TRG_UPDATE_SEOBJECT] ON [dbo].[SEOBJECT] FOR UPDATE AS IF UPDATE(object_parentid) DECLARE 	@lv_parentid		varchar(32), 	@lv_old_parentid	varchar(32), 	@lv_objectid 		varchar(32), 	@lv_parent_level	varchar(32), 	@lv_prev_level		INT, 	@lv_row_count		INT BEGIN 	SELECT @lv_row_count = COUNT(1) FROM inserted     IF @lv_row_count = 0 	RETURN 	SELECT @lv_parentid = object_parentid, @lv_objectid = object_id 	FROM inserted 	SELECT @lv_old_parentid = object_parentid 	FROM deleted 	IF @lv_old_parentid <> @lv_parentid 	BEGIN 	    IF @lv_row_count > 1 		BEGIN 			RAISERROR('Query tried to update the parentid of more than 1 object.',16,1) 			ROLLBACK TRANSACTION 		END 		SELECT @lv_parent_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_parentid 		IF @lv_parent_level = 0 		    RETURN 		SELECT @lv_prev_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_objectid 		DELETE FROM serelations 		 WHERE object_id 	 in (SELECT object_id 					       FROM serelations 					      WHERE object_descendent = @lv_objectid) AND 		       object_descendent in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		DELETE FROM serelations 		WHERE object_descendent = @lv_objectid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) VALUES(@lv_parentid, @lv_objectid) 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT object_id, @lv_objectid 		  FROM serelations 		 WHERE object_descendent = @lv_parentid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT R1.object_id, R2.object_descendent 		  FROM SERELATIONS R1, SERELATIONS R2 		 WHERE R1.OBJECT_DESCENDENT = @lv_objectid AND 		       R2.OBJECT_ID = @lv_objectid 		IF @lv_prev_level - 1 <> @lv_parent_level 		BEGIN 			UPDATE seobject 			   SET object_level = @lv_parent_level + 1 			 WHERE object_id = @lv_objectid 			UPDATE SEOBJECT 			   SET object_level = object_level + (@lv_parent_level - (@lv_prev_level - 1)) 			 WHERE object_id in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		END 	END END",12,517576882,0,False,"CREATE TRIGGER [SE_TRG_UPDATE_SEOBJECT] ON [dbo].[SEOBJECT] FOR UPDATE AS IF UPDATE(object_parentid) DECLARE 	@lv_parentid		varchar(32), 	@lv_old_parentid	varchar(32), 	@lv_objectid 		varchar(32), 	@lv_parent_level	varchar(32), 	@lv_prev_level		INT, 	@lv_row_count		INT BEGIN 	SELECT @lv_row_count = COUNT(1) FROM inserted     IF @lv_row_count = 0 	RETURN 	SELECT @lv_parentid = object_parentid, @lv_objectid = object_id 	FROM inserted 	SELECT @lv_old_parentid = object_parentid 	FROM deleted 	IF @lv_old_parentid <> @lv_parentid 	BEGIN 	    IF @lv_row_count > 1 		BEGIN 			RAISERROR('Query tried to update the parentid of more than 1 object.',16,1) 			ROLLBACK TRANSACTION 		END 		SELECT @lv_parent_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_parentid 		IF @lv_parent_level = 0 		    RETURN 		SELECT @lv_prev_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_objectid 		DELETE FROM serelations 		 WHERE object_id 	 in (SELECT object_id 					       FROM serelations 					      WHERE object_descendent = @lv_objectid) AND 		       object_descendent in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		DELETE FROM serelations 		WHERE object_descendent = @lv_objectid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) VALUES(@lv_parentid, @lv_objectid) 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT object_id, @lv_objectid 		  FROM serelations 		 WHERE object_descendent = @lv_parentid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT R1.object_id, R2.object_descendent 		  FROM SERELATIONS R1, SERELATIONS R2 		 WHERE R1.OBJECT_DESCENDENT = @lv_objectid AND 		       R2.OBJECT_ID = @lv_objectid 		IF @lv_prev_level - 1 <> @lv_parent_level 		BEGIN 			UPDATE seobject 			   SET object_level = @lv_parent_level + 1 			 WHERE object_id = @lv_objectid 			UPDATE SEOBJECT 			   SET object_level = object_level + (@lv_parent_level - (@lv_prev_level - 1)) 			 WHERE object_id in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		END 	END END"
2024-09-26 11:43:03.597,"CREATE TRIGGER [SE_TRG_UPDATE_SEOBJECT] ON [dbo].[SEOBJECT] FOR UPDATE AS IF UPDATE(object_parentid) DECLARE 	@lv_parentid		varchar(32), 	@lv_old_parentid	varchar(32), 	@lv_objectid 		varchar(32), 	@lv_parent_level	varchar(32), 	@lv_prev_level		INT, 	@lv_row_count		INT BEGIN 	SELECT @lv_row_count = COUNT(1) FROM inserted     IF @lv_row_count = 0 	RETURN 	SELECT @lv_parentid = object_parentid, @lv_objectid = object_id 	FROM inserted 	SELECT @lv_old_parentid = object_parentid 	FROM deleted 	IF @lv_old_parentid <> @lv_parentid 	BEGIN 	    IF @lv_row_count > 1 		BEGIN 			RAISERROR('Query tried to update the parentid of more than 1 object.',16,1) 			ROLLBACK TRANSACTION 		END 		SELECT @lv_parent_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_parentid 		IF @lv_parent_level = 0 		    RETURN 		SELECT @lv_prev_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_objectid 		DELETE FROM serelations 		 WHERE object_id 	 in (SELECT object_id 					       FROM serelations 					      WHERE object_descendent = @lv_objectid) AND 		       object_descendent in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		DELETE FROM serelations 		WHERE object_descendent = @lv_objectid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) VALUES(@lv_parentid, @lv_objectid) 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT object_id, @lv_objectid 		  FROM serelations 		 WHERE object_descendent = @lv_parentid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT R1.object_id, R2.object_descendent 		  FROM SERELATIONS R1, SERELATIONS R2 		 WHERE R1.OBJECT_DESCENDENT = @lv_objectid AND 		       R2.OBJECT_ID = @lv_objectid 		IF @lv_prev_level - 1 <> @lv_parent_level 		BEGIN 			UPDATE seobject 			   SET object_level = @lv_parent_level + 1 			 WHERE object_id = @lv_objectid 			UPDATE SEOBJECT 			   SET object_level = object_level + (@lv_parent_level - (@lv_prev_level - 1)) 			 WHERE object_id in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		END 	END END",12,517576882,0,False,"CREATE TRIGGER [SE_TRG_UPDATE_SEOBJECT] ON [dbo].[SEOBJECT] FOR UPDATE AS IF UPDATE(object_parentid) DECLARE 	@lv_parentid		varchar(32), 	@lv_old_parentid	varchar(32), 	@lv_objectid 		varchar(32), 	@lv_parent_level	varchar(32), 	@lv_prev_level		INT, 	@lv_row_count		INT BEGIN 	SELECT @lv_row_count = COUNT(1) FROM inserted     IF @lv_row_count = 0 	RETURN 	SELECT @lv_parentid = object_parentid, @lv_objectid = object_id 	FROM inserted 	SELECT @lv_old_parentid = object_parentid 	FROM deleted 	IF @lv_old_parentid <> @lv_parentid 	BEGIN 	    IF @lv_row_count > 1 		BEGIN 			RAISERROR('Query tried to update the parentid of more than 1 object.',16,1) 			ROLLBACK TRANSACTION 		END 		SELECT @lv_parent_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_parentid 		IF @lv_parent_level = 0 		    RETURN 		SELECT @lv_prev_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_objectid 		DELETE FROM serelations 		 WHERE object_id 	 in (SELECT object_id 					       FROM serelations 					      WHERE object_descendent = @lv_objectid) AND 		       object_descendent in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		DELETE FROM serelations 		WHERE object_descendent = @lv_objectid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) VALUES(@lv_parentid, @lv_objectid) 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT object_id, @lv_objectid 		  FROM serelations 		 WHERE object_descendent = @lv_parentid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT R1.object_id, R2.object_descendent 		  FROM SERELATIONS R1, SERELATIONS R2 		 WHERE R1.OBJECT_DESCENDENT = @lv_objectid AND 		       R2.OBJECT_ID = @lv_objectid 		IF @lv_prev_level - 1 <> @lv_parent_level 		BEGIN 			UPDATE seobject 			   SET object_level = @lv_parent_level + 1 			 WHERE object_id = @lv_objectid 			UPDATE SEOBJECT 			   SET object_level = object_level + (@lv_parent_level - (@lv_prev_level - 1)) 			 WHERE object_id in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		END 	END END"
2024-09-26 11:43:03.593,"CREATE TRIGGER [SE_TRG_UPDATE_SEOBJECT] ON [dbo].[SEOBJECT] FOR UPDATE AS IF UPDATE(object_parentid) DECLARE 	@lv_parentid		varchar(32), 	@lv_old_parentid	varchar(32), 	@lv_objectid 		varchar(32), 	@lv_parent_level	varchar(32), 	@lv_prev_level		INT, 	@lv_row_count		INT BEGIN 	SELECT @lv_row_count = COUNT(1) FROM inserted     IF @lv_row_count = 0 	RETURN 	SELECT @lv_parentid = object_parentid, @lv_objectid = object_id 	FROM inserted 	SELECT @lv_old_parentid = object_parentid 	FROM deleted 	IF @lv_old_parentid <> @lv_parentid 	BEGIN 	    IF @lv_row_count > 1 		BEGIN 			RAISERROR('Query tried to update the parentid of more than 1 object.',16,1) 			ROLLBACK TRANSACTION 		END 		SELECT @lv_parent_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_parentid 		IF @lv_parent_level = 0 		    RETURN 		SELECT @lv_prev_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_objectid 		DELETE FROM serelations 		 WHERE object_id 	 in (SELECT object_id 					       FROM serelations 					      WHERE object_descendent = @lv_objectid) AND 		       object_descendent in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		DELETE FROM serelations 		WHERE object_descendent = @lv_objectid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) VALUES(@lv_parentid, @lv_objectid) 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT object_id, @lv_objectid 		  FROM serelations 		 WHERE object_descendent = @lv_parentid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT R1.object_id, R2.object_descendent 		  FROM SERELATIONS R1, SERELATIONS R2 		 WHERE R1.OBJECT_DESCENDENT = @lv_objectid AND 		       R2.OBJECT_ID = @lv_objectid 		IF @lv_prev_level - 1 <> @lv_parent_level 		BEGIN 			UPDATE seobject 			   SET object_level = @lv_parent_level + 1 			 WHERE object_id = @lv_objectid 			UPDATE SEOBJECT 			   SET object_level = object_level + (@lv_parent_level - (@lv_prev_level - 1)) 			 WHERE object_id in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		END 	END END",12,517576882,0,False,"CREATE TRIGGER [SE_TRG_UPDATE_SEOBJECT] ON [dbo].[SEOBJECT] FOR UPDATE AS IF UPDATE(object_parentid) DECLARE 	@lv_parentid		varchar(32), 	@lv_old_parentid	varchar(32), 	@lv_objectid 		varchar(32), 	@lv_parent_level	varchar(32), 	@lv_prev_level		INT, 	@lv_row_count		INT BEGIN 	SELECT @lv_row_count = COUNT(1) FROM inserted     IF @lv_row_count = 0 	RETURN 	SELECT @lv_parentid = object_parentid, @lv_objectid = object_id 	FROM inserted 	SELECT @lv_old_parentid = object_parentid 	FROM deleted 	IF @lv_old_parentid <> @lv_parentid 	BEGIN 	    IF @lv_row_count > 1 		BEGIN 			RAISERROR('Query tried to update the parentid of more than 1 object.',16,1) 			ROLLBACK TRANSACTION 		END 		SELECT @lv_parent_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_parentid 		IF @lv_parent_level = 0 		    RETURN 		SELECT @lv_prev_level = object_level 		  FROM seobject 		 WHERE object_id = @lv_objectid 		DELETE FROM serelations 		 WHERE object_id 	 in (SELECT object_id 					       FROM serelations 					      WHERE object_descendent = @lv_objectid) AND 		       object_descendent in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		DELETE FROM serelations 		WHERE object_descendent = @lv_objectid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) VALUES(@lv_parentid, @lv_objectid) 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT object_id, @lv_objectid 		  FROM serelations 		 WHERE object_descendent = @lv_parentid 		INSERT INTO SERELATIONS(OBJECT_ID, OBJECT_DESCENDENT) 		SELECT R1.object_id, R2.object_descendent 		  FROM SERELATIONS R1, SERELATIONS R2 		 WHERE R1.OBJECT_DESCENDENT = @lv_objectid AND 		       R2.OBJECT_ID = @lv_objectid 		IF @lv_prev_level - 1 <> @lv_parent_level 		BEGIN 			UPDATE seobject 			   SET object_level = @lv_parent_level + 1 			 WHERE object_id = @lv_objectid 			UPDATE SEOBJECT 			   SET object_level = object_level + (@lv_parent_level - (@lv_prev_level - 1)) 			 WHERE object_id in (SELECT object_descendent 					       FROM serelations 					      WHERE object_id = @lv_objectid) 		END 	END END"
2024-09-24 16:34:00.043,"CREATE PROCEDURE [dbo].[SE_SEOBJECTLOCK] 	@ptrOBJECT_ID	varchar(32)		= -1	OUTPUT,  	@ptrUSER_ID	varchar(32)		= -1	OUTPUT,  	@ptrSESSION_ID	varchar(32)	= NULL	OUTPUT,  	@ptrSERVER_IP	VARCHAR(15)	= NULL	OUTPUT,  	@ptrPURPOSE	VARCHAR(255)	= NULL	OUTPUT,  	@ptrRESULT	INT		= 9	OUTPUT,  	@ptrACTION	INT		= 9	OUTPUT, 	@ptrACQUIRED	DATETIME	= NULL	OUTPUT AS BEGIN /* 	Values for ptrACTION -> 1 = SET, 2 = UNSET, 3 = TEST, 4 = RESET, 5 = LIST 	Values for ptrRESULT -> 1 = SUCCESS, 0 = FAILURE */ 	DECLARE @recCNTR INT, @recCNTR_ANC INT, @recCNTR_DES INT 	IF @ptrOBJECT_ID IS NOT NULL 		BEGIN 			SET @recCNTR = (SELECT COUNT(9) FROM SEOBJECTLOCK WHERE LOCK_OBJECT_ID = @ptrOBJECT_ID) 		END 	IF (@ptrACTION = 1) AND (@ptrPURPOSE <> 'DELETE') /* Check must be made against all ancestors of that object. If any ancestor has an existing lock whose purpose is ""DELETE"" then the new lock must fail because that object will be deleted with the ancestor deletion. */ 		BEGIN 			IF @recCNTR = 0 				BEGIN 					SET @recCNTR_ANC = (SELECT COUNT(9) 							      FROM SEOBJECTLOCK 							     WHERE LOCK_PURPOSE = 'DELETE' AND                                                                    EXISTS (SELECT * 									     FROM SERELATIONS 									    WHERE OBJECT_DESCENDENT = @ptrOBJECT_ID AND 										  OBJECT_ID         = LOCK_OBJECT_ID)) 					IF @recCNTR_ANC = 0 						BEGIN 							INSERT INTO SEOBJECTLOCK(LOCK_OBJECT_ID, LOCK_USER_OBJECT_ID, LOCK_SESSION_ID, LOCK_SERVER_IP, LOCK_PURPOSE, LOCK_ACQUIRED) 							VALUES(@ptrOBJECT_ID, @ptrUSER_ID, @ptrSESSION_ID, @ptrSERVER_IP, @ptrPURPOSE, GETDATE()) 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							SELECT @ptrOBJECT_ID	= LOCK_OBJECT_ID	, 							       @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 							       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 							       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 							       @ptrPURPOSE 	= LOCK_PURPOSE		, 							       @ptrACQUIRED 	= LOCK_ACQUIRED 							  FROM SEOBJECTLOCK 							 WHERE LOCK_PURPOSE = 'DELETE' 							 	   AND EXISTS ( 								   		SELECT 1 									     FROM  SERELATIONS 									    WHERE  OBJECT_DESCENDENT = @ptrOBJECT_ID 											   AND OBJECT_ID = LOCK_OBJECT_ID 								   ) 							RETURN 1 						END 				END 			ELSE 				BEGIN 					SET @ptrRESULT = 0 					SELECT @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 					       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 					       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 					       @ptrPURPOSE 	= LOCK_PURPOSE		, 					       @ptrACQUIRED 	= LOCK_ACQUIRED 					  FROM SEOBJECTLOCK 					 WHERE LOCK_OBJECT_ID 	= @ptrOBJECT_ID 					RETURN 1 				END 		END 	IF (@ptrACTION = 1) AND (@ptrPURPOSE = 'DELETE') /* Check must be made against all descendents of that object. If any descendent has an existing lock for any purpose then the lock must fail. This will prevent users from deleting objects which are currently being acted upon. */ 		BEGIN 			IF @recCNTR = 0 				BEGIN 					SET @recCNTR_DES = (SELECT COUNT(9) 							      FROM SEOBJECTLOCK 							     WHERE EXISTS (SELECT * 									     FROM SERELATIONS 									    WHERE OBJECT_ID         = @ptrOBJECT_ID AND 										  OBJECT_DESCENDENT = LOCK_OBJECT_ID)) 					IF @recCNTR_DES = 0 						BEGIN 							INSERT INTO SEOBJECTLOCK(LOCK_OBJECT_ID, LOCK_USER_OBJECT_ID, LOCK_SESSION_ID, LOCK_SERVER_IP, LOCK_PURPOSE, LOCK_ACQUIRED) 							VALUES(@ptrOBJECT_ID, @ptrUSER_ID, @ptrSESSION_ID, @ptrSERVER_IP, @ptrPURPOSE, GETDATE()) 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							SELECT @ptrOBJECT_ID	= LOCK_OBJECT_ID	, 							       @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 							       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 							       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 							       @ptrPURPOSE 	= LOCK_PURPOSE		, 							       @ptrACQUIRED 	= LOCK_ACQUIRED 							  FROM SEOBJECTLOCK 							 WHERE EXISTS ( 									SELECT 1 									  FROM SERELATIONS 									 WHERE OBJECT_ID = @ptrOBJECT_ID 									       AND OBJECT_DESCENDENT = LOCK_OBJECT_ID 							       ) 							RETURN 1 						END 				END 			ELSE 				BEGIN 					SET @ptrRESULT = 0 					SELECT @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 					       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 					       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 					       @ptrPURPOSE 	= LOCK_PURPOSE		, 					       @ptrACQUIRED 	= LOCK_ACQUIRED 					  FROM SEOBJECTLOCK 					 WHERE LOCK_OBJECT_ID 	= @ptrOBJECT_ID 					RETURN 1 				END 		END 	IF @ptrACTION = 2 		BEGIN 			IF @recCNTR = 0 				BEGIN 					SET @ptrRESULT = 0 					RETURN 1 				END 			ELSE 				BEGIN 					DELETE FROM SEOBJECTLOCK 					 WHERE LOCK_OBJECT_ID  = @ptrOBJECT_ID AND 					       LOCK_SESSION_ID = @ptrSESSION_ID 					SET @ptrRESULT = @@ROWCOUNT 					RETURN 1 				END 		END 	IF @ptrACTION = 3 		BEGIN 			IF @recCNTR = 0 				BEGIN 					SET @recCNTR_ANC = (SELECT COUNT(9) 							      FROM SEOBJECTLOCK 							     WHERE LOCK_PURPOSE = 'DELETE' AND                                                                    EXISTS (SELECT * 									     FROM SERELATIONS 									    WHERE OBJECT_DESCENDENT = @ptrOBJECT_ID AND 										  OBJECT_ID         = LOCK_OBJECT_ID)) 					IF @recCNTR_ANC = 0 						BEGIN 							SET @ptrRESULT = 1 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							SELECT @ptrOBJECT_ID	= LOCK_OBJECT_ID	, 							       @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 							       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 							       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 							       @ptrPURPOSE 	= LOCK_PURPOSE		, 							       @ptrACQUIRED 	= LOCK_ACQUIRED 							  FROM SEOBJECTLOCK 							 WHERE LOCK_PURPOSE = 'DELETE' 							       AND EXISTS ( 									SELECT	1 									FROM	SERELATIONS 									WHERE	OBJECT_DESCENDENT = @ptrOBJECT_ID 										AND OBJECT_ID = LOCK_OBJECT_ID 							       ) 							RETURN 1 						END 				END 			ELSE 				BEGIN 					SET @ptrRESULT = 0 					SELECT @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 					       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 					       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 					       @ptrPURPOSE 	= LOCK_PURPOSE		, 					       @ptrACQUIRED 	= LOCK_ACQUIRED 					  FROM SEOBJECTLOCK 					 WHERE LOCK_OBJECT_ID 	= @ptrOBJECT_ID 					RETURN 1 				END 		END 	IF @ptrACTION = 4 		BEGIN 			IF (@ptrSESSION_ID IS NULL) AND 			   (@ptrSERVER_IP  IS NULL) 				BEGIN 					SET @ptrRESULT = 0 					RETURN 1 				END 			IF (@ptrSESSION_ID IS NOT NULL) AND 			   (@ptrSERVER_IP  IS NOT NULL) 				BEGIN 					SET @recCNTR = (SELECT COUNT(9) 							  FROM SEOBJECTLOCK 							 WHERE LOCK_SESSION_ID = @ptrSESSION_ID AND 							       LOCK_SERVER_IP  = @ptrSERVER_IP) 					IF @recCNTR <> 0 						BEGIN 							DELETE FROM SEOBJECTLOCK 							 WHERE LOCK_SESSION_ID = @ptrSESSION_ID AND 							       LOCK_SERVER_IP  = @ptrSERVER_IP 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							RETURN 1 						END 				END 			IF (@ptrSESSION_ID IS NOT NULL) AND 			   (@ptrSERVER_IP  IS NULL) 				BEGIN 					SET @recCNTR = (SELECT COUNT(9) 							  FROM SEOBJECTLOCK 							 WHERE LOCK_SESSION_ID = @ptrSESSION_ID) 					IF @recCNTR <> 0 						BEGIN 							DELETE FROM SEOBJECTLOCK 							 WHERE LOCK_SESSION_ID = @ptrSESSION_ID 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							RETURN 1 						END 				END 			IF (@ptrSESSION_ID IS NULL) AND 			   (@ptrSERVER_IP  IS NOT NULL) 				BEGIN 					SET @recCNTR = (SELECT COUNT(9) 							  FROM SEOBJECTLOCK 							 WHERE LOCK_SERVER_IP  = @ptrSERVER_IP) 					IF @recCNTR <> 0 						BEGIN 							DELETE FROM SEOBJECTLOCK 							 WHERE LOCK_SERVER_IP  = @ptrSERVER_IP 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							RETURN 1 						END 				END 		END 	IF @ptrACTION = 5 		BEGIN 			SELECT		l.lock_object_id, 					l.lock_user_object_id, 					l.lock_session_id, 					o.object_name username, 					l.lock_server_ip, 					l.lock_purpose, 					l.lock_acquired 			FROM		seobjectlock l JOIN seobject o 							 ON l.lock_user_object_id = o.object_id 			ORDER BY	lock_server_ip, 					lock_acquired 		END END",12,629577281,1,False,"CREATE PROCEDURE [dbo].[SE_SEOBJECTLOCK] 	@ptrOBJECT_ID	varchar(32)		= -1	OUTPUT,  	@ptrUSER_ID	varchar(32)		= -1	OUTPUT,  	@ptrSESSION_ID	varchar(32)	= NULL	OUTPUT,  	@ptrSERVER_IP	VARCHAR(15)	= NULL	OUTPUT,  	@ptrPURPOSE	VARCHAR(255)	= NULL	OUTPUT,  	@ptrRESULT	INT		= 9	OUTPUT,  	@ptrACTION	INT		= 9	OUTPUT, 	@ptrACQUIRED	DATETIME	= NULL	OUTPUT AS BEGIN /* 	Values for ptrACTION -> 1 = SET, 2 = UNSET, 3 = TEST, 4 = RESET, 5 = LIST 	Values for ptrRESULT -> 1 = SUCCESS, 0 = FAILURE */ 	DECLARE @recCNTR INT, @recCNTR_ANC INT, @recCNTR_DES INT 	IF @ptrOBJECT_ID IS NOT NULL 		BEGIN 			SET @recCNTR = (SELECT COUNT(9) FROM SEOBJECTLOCK WHERE LOCK_OBJECT_ID = @ptrOBJECT_ID) 		END 	IF (@ptrACTION = 1) AND (@ptrPURPOSE <> 'DELETE') /* Check must be made against all ancestors of that object. If any ancestor has an existing lock whose purpose is ""DELETE"" then the new lock must fail because that object will be deleted with the ancestor deletion. */ 		BEGIN 			IF @recCNTR = 0 				BEGIN 					SET @recCNTR_ANC = (SELECT COUNT(9) 							      FROM SEOBJECTLOCK 							     WHERE LOCK_PURPOSE = 'DELETE' AND                                                                    EXISTS (SELECT * 									     FROM SERELATIONS 									    WHERE OBJECT_DESCENDENT = @ptrOBJECT_ID AND 										  OBJECT_ID         = LOCK_OBJECT_ID)) 					IF @recCNTR_ANC = 0 						BEGIN 							INSERT INTO SEOBJECTLOCK(LOCK_OBJECT_ID, LOCK_USER_OBJECT_ID, LOCK_SESSION_ID, LOCK_SERVER_IP, LOCK_PURPOSE, LOCK_ACQUIRED) 							VALUES(@ptrOBJECT_ID, @ptrUSER_ID, @ptrSESSION_ID, @ptrSERVER_IP, @ptrPURPOSE, GETDATE()) 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							SELECT @ptrOBJECT_ID	= LOCK_OBJECT_ID	, 							       @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 							       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 							       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 							       @ptrPURPOSE 	= LOCK_PURPOSE		, 							       @ptrACQUIRED 	= LOCK_ACQUIRED 							  FROM SEOBJECTLOCK 							 WHERE LOCK_PURPOSE = 'DELETE' 							 	   AND EXISTS ( 								   		SELECT 1 									     FROM  SERELATIONS 									    WHERE  OBJECT_DESCENDENT = @ptrOBJECT_ID 											   AND OBJECT_ID = LOCK_OBJECT_ID 								   ) 							RETURN 1 						END 				END 			ELSE 				BEGIN 					SET @ptrRESULT = 0 					SELECT @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 					       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 					       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 					       @ptrPURPOSE 	= LOCK_PURPOSE		, 					       @ptrACQUIRED 	= LOCK_ACQUIRED 					  FROM SEOBJECTLOCK 					 WHERE LOCK_OBJECT_ID 	= @ptrOBJECT_ID 					RETURN 1 				END 		END 	IF (@ptrACTION = 1) AND (@ptrPURPOSE = 'DELETE') /* Check must be made against all descendents of that object. If any descendent has an existing lock for any purpose then the lock must fail. This will prevent users from deleting objects which are currently being acted upon. */ 		BEGIN 			IF @recCNTR = 0 				BEGIN 					SET @recCNTR_DES = (SELECT COUNT(9) 							      FROM SEOBJECTLOCK 							     WHERE EXISTS (SELECT * 									     FROM SERELATIONS 									    WHERE OBJECT_ID         = @ptrOBJECT_ID AND 										  OBJECT_DESCENDENT = LOCK_OBJECT_ID)) 					IF @recCNTR_DES = 0 						BEGIN 							INSERT INTO SEOBJECTLOCK(LOCK_OBJECT_ID, LOCK_USER_OBJECT_ID, LOCK_SESSION_ID, LOCK_SERVER_IP, LOCK_PURPOSE, LOCK_ACQUIRED) 							VALUES(@ptrOBJECT_ID, @ptrUSER_ID, @ptrSESSION_ID, @ptrSERVER_IP, @ptrPURPOSE, GETDATE()) 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							SELECT @ptrOBJECT_ID	= LOCK_OBJECT_ID	, 							       @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 							       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 							       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 							       @ptrPURPOSE 	= LOCK_PURPOSE		, 							       @ptrACQUIRED 	= LOCK_ACQUIRED 							  FROM SEOBJECTLOCK 							 WHERE EXISTS ( 									SELECT 1 									  FROM SERELATIONS 									 WHERE OBJECT_ID = @ptrOBJECT_ID 									       AND OBJECT_DESCENDENT = LOCK_OBJECT_ID 							       ) 							RETURN 1 						END 				END 			ELSE 				BEGIN 					SET @ptrRESULT = 0 					SELECT @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 					       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 					       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 					       @ptrPURPOSE 	= LOCK_PURPOSE		, 					       @ptrACQUIRED 	= LOCK_ACQUIRED 					  FROM SEOBJECTLOCK 					 WHERE LOCK_OBJECT_ID 	= @ptrOBJECT_ID 					RETURN 1 				END 		END 	IF @ptrACTION = 2 		BEGIN 			IF @recCNTR = 0 				BEGIN 					SET @ptrRESULT = 0 					RETURN 1 				END 			ELSE 				BEGIN 					DELETE FROM SEOBJECTLOCK 					 WHERE LOCK_OBJECT_ID  = @ptrOBJECT_ID AND 					       LOCK_SESSION_ID = @ptrSESSION_ID 					SET @ptrRESULT = @@ROWCOUNT 					RETURN 1 				END 		END 	IF @ptrACTION = 3 		BEGIN 			IF @recCNTR = 0 				BEGIN 					SET @recCNTR_ANC = (SELECT COUNT(9) 							      FROM SEOBJECTLOCK 							     WHERE LOCK_PURPOSE = 'DELETE' AND                                                                    EXISTS (SELECT * 									     FROM SERELATIONS 									    WHERE OBJECT_DESCENDENT = @ptrOBJECT_ID AND 										  OBJECT_ID         = LOCK_OBJECT_ID)) 					IF @recCNTR_ANC = 0 						BEGIN 							SET @ptrRESULT = 1 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							SELECT @ptrOBJECT_ID	= LOCK_OBJECT_ID	, 							       @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 							       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 							       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 							       @ptrPURPOSE 	= LOCK_PURPOSE		, 							       @ptrACQUIRED 	= LOCK_ACQUIRED 							  FROM SEOBJECTLOCK 							 WHERE LOCK_PURPOSE = 'DELETE' 							       AND EXISTS ( 									SELECT	1 									FROM	SERELATIONS 									WHERE	OBJECT_DESCENDENT = @ptrOBJECT_ID 										AND OBJECT_ID = LOCK_OBJECT_ID 							       ) 							RETURN 1 						END 				END 			ELSE 				BEGIN 					SET @ptrRESULT = 0 					SELECT @ptrUSER_ID 	= LOCK_USER_OBJECT_ID	, 					       @ptrSESSION_ID 	= LOCK_SESSION_ID	, 					       @ptrSERVER_IP 	= LOCK_SERVER_IP	, 					       @ptrPURPOSE 	= LOCK_PURPOSE		, 					       @ptrACQUIRED 	= LOCK_ACQUIRED 					  FROM SEOBJECTLOCK 					 WHERE LOCK_OBJECT_ID 	= @ptrOBJECT_ID 					RETURN 1 				END 		END 	IF @ptrACTION = 4 		BEGIN 			IF (@ptrSESSION_ID IS NULL) AND 			   (@ptrSERVER_IP  IS NULL) 				BEGIN 					SET @ptrRESULT = 0 					RETURN 1 				END 			IF (@ptrSESSION_ID IS NOT NULL) AND 			   (@ptrSERVER_IP  IS NOT NULL) 				BEGIN 					SET @recCNTR = (SELECT COUNT(9) 							  FROM SEOBJECTLOCK 							 WHERE LOCK_SESSION_ID = @ptrSESSION_ID AND 							       LOCK_SERVER_IP  = @ptrSERVER_IP) 					IF @recCNTR <> 0 						BEGIN 							DELETE FROM SEOBJECTLOCK 							 WHERE LOCK_SESSION_ID = @ptrSESSION_ID AND 							       LOCK_SERVER_IP  = @ptrSERVER_IP 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							RETURN 1 						END 				END 			IF (@ptrSESSION_ID IS NOT NULL) AND 			   (@ptrSERVER_IP  IS NULL) 				BEGIN 					SET @recCNTR = (SELECT COUNT(9) 							  FROM SEOBJECTLOCK 							 WHERE LOCK_SESSION_ID = @ptrSESSION_ID) 					IF @recCNTR <> 0 						BEGIN 							DELETE FROM SEOBJECTLOCK 							 WHERE LOCK_SESSION_ID = @ptrSESSION_ID 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							RETURN 1 						END 				END 			IF (@ptrSESSION_ID IS NULL) AND 			   (@ptrSERVER_IP  IS NOT NULL) 				BEGIN 					SET @recCNTR = (SELECT COUNT(9) 							  FROM SEOBJECTLOCK 							 WHERE LOCK_SERVER_IP  = @ptrSERVER_IP) 					IF @recCNTR <> 0 						BEGIN 							DELETE FROM SEOBJECTLOCK 							 WHERE LOCK_SERVER_IP  = @ptrSERVER_IP 							SET @ptrRESULT = @@ROWCOUNT 							RETURN 1 						END 					ELSE 						BEGIN 							SET @ptrRESULT = 0 							RETURN 1 						END 				END 		END 	IF @ptrACTION = 5 		BEGIN 			SELECT		l.lock_object_id, 					l.lock_user_object_id, 					l.lock_session_id, 					o.object_name username, 					l.lock_server_ip, 					l.lock_purpose, 					l.lock_acquired 			FROM		seobjectlock l JOIN seobject o 							 ON l.lock_user_object_id = o.object_id 			ORDER BY	lock_server_ip, 					lock_acquired 		END END"
