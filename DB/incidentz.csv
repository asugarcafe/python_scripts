Time,Query,dbid,objectid,number,encrypted,text
2024-09-25 12:01:32.070,"
/*
Name: usp_InsertAttachment
Description: inserts data to incidentAttachment table with input from a form.
Author: Michael Culletto
Modification Log: change

Description		Date		Changed By

*/

CREATE PROCEDURE [dbo].[usp_InsertAttachment]

/* FORM VARIABLES */
@IID int,
@attName varchar(150),
@attFileName varchar(150),
@attExt varchar(50),
@attFolder varchar(100),
@attType varchar(200),
@attSize int,
@attTimeCreated datetime,
@attIsActive bit,

@insertAttResults int OUTPUT

AS
BEGIN

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			
			BEGIN

				SET NOCOUNT ON;

				INSERT INTO dbo.incidentAttachment (
				IID,
				attName,
				attFileName,
				attExt,
				attFolder,
				attType,
				attSize,
				attTimeCreated,
				attIsActive)

				VALUES (
				@IID,
				@attName,
				@attFileName,
				@attExt,
				@attFolder,
				@attType,
				@attSize,
				@attTimeCreated,
				@attIsActive);

			END
	COMMIT TRANSACTION;

END

SET @insertAttResults = 1;
RETURN @insertAttResults",13,245575913,1,False,"
/*
Name: usp_InsertAttachment
Description: inserts data to incidentAttachment table with input from a form.
Author: Michael Culletto
Modification Log: change

Description		Date		Changed By

*/

CREATE PROCEDURE [dbo].[usp_InsertAttachment]

/* FORM VARIABLES */
@IID int,
@attName varchar(150),
@attFileName varchar(150),
@attExt varchar(50),
@attFolder varchar(100),
@attType varchar(200),
@attSize int,
@attTimeCreated datetime,
@attIsActive bit,

@insertAttResults int OUTPUT

AS
BEGIN

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			
			BEGIN

				SET NOCOUNT ON;

				INSERT INTO dbo.incidentAttachment (
				IID,
				attName,
				attFileName,
				attExt,
				attFolder,
				attType,
				attSize,
				attTimeCreated,
				attIsActive)

				VALUES (
				@IID,
				@attName,
				@attFileName,
				@attExt,
				@attFolder,
				@attType,
				@attSize,
				@attTimeCreated,
				@attIsActive);

			END
	COMMIT TRANSACTION;

END

SET @insertAttResults = 1;
RETURN @insertAttResults"
2024-09-25 12:01:31.943,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 12:01:31.937,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 12:01:31.927,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 12:01:31.923,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 12:01:31.917,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 12:01:31.910,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 12:01:31.903,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 12:01:31.900,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 12:01:31.890,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
",13,293576084,1,False,"/*
Name: usp_UpdateIncidentAll
Description: updates incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 

Author: Sue Glenn
Modification Log: change
Description		Date		Changed By
Created procedure	5/11/2017	S. Glenn
*/

CREATE PROCEDURE [dbo].[usp_UpdateIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPaOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar (MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar (100),
@hdnRevFirstName varchar (50),
@hdnRevLastName varchar (50),
@hdnRevType varchar (50),
@hasAttachments bit,
@hdnIncidentID int

AS

/* Update incident */
BEGIN
	SET NOCOUNT ON

	UPDATE dbo.incident
	SET 
		BID = @selBranchName,
		pdID = @selPdName,
		catID = @selCategory,
		scatID = @selSubCategory,
		date = @txtDateTime,
		locationDetails = @txtLocationDetails,
		shortDescription = @txtTitle,
		longDescription = @txaDescription,
		informed = @chkInformed,
		otherInformed = @txaInformedOther,
		otherEmployee = @txaEmpOther,
		otherPatron = @txaPaOther,
		banDuration = @txaBanDuration,
		action = @txaAction,
		suggestion = @txaSuggestion,
		followup = @txaFollowup,
		related = @txaRelated,
		attachments = @hasAttachments,
		policeInvolved = @rbtPoliceInvolved,
		banned = @rbtBanned,
		otherPolice = @txaPoOther
	WHERE
		IID = @hdnIncidentID;
END

/* ID VARIABLES */
	DECLARE
	@empEID int,
	@chgEID int,
	@newEID int,
	@paID int,
	@chgPaID int,
	@newPaID int,
	@poID int,
	@chgPoID int,
	@newPoID int,
	@hdnRevWhen datetime
	
/* Update incidentEmployee */

	SELECT @empEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @empEID IS NULL

			BEGIN
				SET @newEID=@empEID;
					IF (@newEID IS NULL) 
					/* New name - Insert into incidentEmployee & update incident EID*/
						BEGIN
							INSERT INTO dbo.incidentEmployee(
								empLastName,
								empFirstName)
								VALUES (
								@txtEmpLastName,
								@txtEmpFirstName);
							
							SELECT @newEID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET EID=@newEID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Employee in incidentEmployee table, but does not
							     match EID in incident table. Get EID from 
								 incidentEmployee & update incident EID*/
				BEGIN
					SELECT @chgEID=EID FROM incident WHERE EID != @empEID and IID = @hdnIncidentID
						IF (@chgEID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET EID=@empEID
									WHERE IID=@hdnIncidentID;
							END
				END
	
	
	/* Update incidentPatron */

	SELECT @paID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
		IF @paID IS NULL

			BEGIN
				SET @newPaID=@paID;
					IF (@newPaID IS NULL) 
					/* New name - Insert into incidentPatron & update incident paID*/
						BEGIN
							INSERT INTO dbo.incidentPatron(
								paLastName,
								paFirstName,
								paPhone,
								paEmail)
								VALUES (
								@txtPaLastName,
								@txtPaFirstName,
								@txtPaPhone,
								@txtPaEmail);
							
							SELECT @newPaID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET paID=@newPaID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Patron in incidentPatron table, but does not
							     match paID in incident table. Get paID from 
								 incidentPatron & update incident paID*/
				BEGIN
					SELECT @chgPaID=paID FROM incident WHERE paID != @paID and IID = @hdnIncidentID
						IF (@chgPaID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET paID=@paID
									WHERE IID=@hdnIncidentID;
							END
				END

	/* Update incidentPolice */

	SELECT @poID=poID FROM incidentPolice WHERE poName=@txtPoName AND poCase != @txtPoCase;
		IF @poID IS NULL

			BEGIN
				SET @newPoID=@poID;
					IF (@newPoID IS NULL) 
					/* New name - Insert into incidentPolice & update incident poID*/
						BEGIN
							INSERT INTO dbo.incidentPolice(
								poName,
								poPhone,
								poEmail,
								poCase)
								VALUES (
								@txtPoName,
								@txtPoPhone,
								@txtPoEmail,
								@txtPoCase);
							
							SELECT @newPoID = SCOPE_IDENTITY();

							UPDATE dbo.incident
								SET poID=@newPoID
								WHERE IID=@hdnIncidentID;
						END

			END
			ELSE
				/* Change name - Police name in incidentPolice table, but does not
							     match poID in incident table. Get poID from 
								 incidentPolice & update incident poID*/
				BEGIN
					SELECT @chgPoID=poID FROM incident WHERE poID != @poID and IID = @hdnIncidentID
						IF (@chgPoID IS NOT NULL)
							BEGIN			
								UPDATE dbo.incident
									SET poID=@poID
									WHERE IID=@hdnIncidentID;
							END
				END

/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @hdnIncidentID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@hdnIncidentID);
				END
		COMMIT TRANSACTION;
	END
"
2024-09-25 10:52:14.920,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.910,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.903,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.897,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.887,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.880,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.873,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.860,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.853,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
2024-09-25 10:52:14.830,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults",13,261575970,1,False,"/*
Name: usp_InsertIncidentAll
Description: inserts data to incident, incidentEmployee,
incidentPatron, incidentPolice, incidentRevision and incidentAttachment
tables with input from a form. 
After insert, updates incident table with IDs from other tables.
Author: Sue Glenn
Modification Log: change

Description		Date		Changed By
Created procedure	5/12/2017	S.Glenn
Commented out attachment insert for testing 6/21/2017 S.Glenn
Changed attachment code to only need the hasAttachments variable 6/22/2017 M.Culletto
Changed test of data present for Insert into incidentPolice and incidentPatron 8/16/2018 S.Glenn

*/

CREATE PROCEDURE [dbo].[usp_InsertIncidentAll]
 
/* FORM VARIABLES */
@selBranchName int,
@selPdName int,
@selCategory int,
@selSubCategory int,
@txtDateTime datetime,
@txtLocationDetails varchar(500),
@txtTitle varchar(100),
@txaDescription varchar(MAX),
@chkInformed varchar(255),
@txaInformedOther varchar(500),
@txaEmpOther varchar (500),
@txaPatronOther varchar(500),
@txaBanDuration varchar(255),
@txaAction varchar (MAX),
@txaSuggestion varchar (MAX),
@txaFollowup varchar(MAX),
@txaRelated varchar (500),
@rbtPoliceInvolved bit,
@rbtBanned bit,
@hdnIsActive bit,
@hdnIsTest bit,
@txtEmpLastName varchar(50),
@txtEmpFirstName varchar(50),
@txtPaLastName varchar(50),
@txtPaFirstName varchar(50),
@txtPaPhone varchar(50),
@txtPaEmail varchar(100),
@txtPoName varchar(100),
@txtPoPhone varchar(50),
@txtPoEmail varchar(100),
@txtPoCase varchar(MAX),
@txaPoOther varchar(500),
@hdnRevWho varchar(100),
@hdnRevFirstName varchar(50),
@hdnRevLastName varchar(50),
@hdnRevType varchar (50),
@hasAttachments bit,
@insertResults int OUTPUT


AS
BEGIN
SET NOCOUNT ON
	INSERT INTO dbo.incident (
	BID,
	pdID,
	catID,
	scatID,
	date,
	locationDetails,
	shortDescription,
	longDescription,
	informed,
	otherInformed,
	otherEmployee,
	otherPatron,
	banDuration,
	action,
	suggestion,
	followup,
	related,
	attachments,
	policeInvolved,
	otherPolice,
	banned,
	isActive,
	isTest)

	VALUES (
	@selBranchName,
	@selPdName,
	@selCategory,
	@selSubCategory,
	@txtDateTime,
	@txtLocationDetails,
	@txtTitle,
	@txaDescription,
	@chkInformed,
	@txaInformedOther,
	@txaEmpOther,
	@txaPatronOther,
	@txaBanDuration,
	@txaAction,
	@txaSuggestion,
	@txaFollowup,
	@txaRelated,
	@hasAttachments,
	@rbtPoliceInvolved,
	@txaPoOther,
	@rbtBanned,
	@hdnIsActive,
	@hdnIsTest);

END

/* ID VARIABLES */
	DECLARE
	@newIID int,
	@newEID int,
	@newPaID int,
	@newPoID int,
	@newRevID int,
	@hdnRevWhen datetime

	SELECT @newIID = SCOPE_IDENTITY();

/* Insert into incidentEmployee - required*/

	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
	BEGIN TRANSACTION;
		SELECT @newEID=EID FROM incidentEmployee WHERE empLastName=@txtEmpLastName AND empFirstName=@txtEmpFirstName;
		IF @newEID IS NULL
			BEGIN
				INSERT INTO dbo.incidentEmployee(
					empLastName,
					empFirstName)
					VALUES (
					@txtEmpLastName,
					@txtEmpFirstName);
				SELECT @newEID = SCOPE_IDENTITY();
				UPDATE dbo.incident
					SET EID=@newEID
					WHERE IID=@newIID;
			END
		ELSE
				UPDATE dbo.incident
				SET EID=@newEID
				WHERE IID=@newIID;
	COMMIT TRANSACTION;


/* Insert into incidentPatron - not required*/
--IF (@txtPaFirstName IS NOT NULL AND @txtPaLastName IS NOT NULL)

IF NOT((LEN(ISNULL(@txtPaFirstName,''))=0)
		AND (LEN(ISNULL(@txtPaLastName,''))=0))
	-- Insert if Patron Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPaID=paID FROM incidentPatron WHERE paLastName=@txtPaLastName AND paFirstName=@txtPaFirstName;
			IF @newPaID IS NULL
				BEGIN
					INSERT INTO dbo.incidentPatron(
						paLastName,
						paFirstName,
						paPhone,
						paEmail)
						VALUES (
						@txtPaLastName,
						@txtPaFirstName,
						@txtPaPhone,
						@txtPaEmail);
					SELECT @newPaID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET paID=@newPaID
						WHERE IID=@newIID;
				END
			ELSE
					UPDATE dbo.incident
					SET paID=@newPaID
					WHERE IID=@newIID;
		COMMIT TRANSACTION;
	END

/*Insert into incidentPolice - not required */

--IF (@txtPoName IS NOT NULL)

IF NOT(LEN(ISNULL(@txtPoName,''))=0)
    -- Insert if Police Name contains data
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			SELECT @newPoID=poID from incidentPolice WHERE poName=@txtPoName;
			/*IF @newPoID IS NULL   insert first incidentPolice */
				BEGIN
					INSERT INTO dbo.incidentPolice(
						pdID,
						poName,
						poPhone,
						poEmail,
						poCase)
						VALUES (
						@selPdName,
						@txtPoName,
						@txtPoPhone,
						@txtPoEmail,
						@txtPoCase);
					SELECT @newPoID = SCOPE_IDENTITY();
					UPDATE dbo.incident
						SET poID=@newPoID
						WHERE IID=@newIID;
				END
		COMMIT TRANSACTION;
	END


/* Insert into incidentRevision - not required FK*/
IF (@hdnRevFirstName IS NOT NULL AND @hdnRevLastName IS NOT NULL)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					SET @hdnRevWhen = GetDate()

					INSERT INTO dbo.incidentRevision(
						revWho,
						revWhen,
						revFirstName,
						revLastName,
						revType,
						IID)
						VALUES (
						@hdnRevWho,
						@hdnRevWhen,
						@hdnRevFirstName,
						@hdnRevLastName,
						@hdnRevType,
						@newIID);
				END
		COMMIT TRANSACTION;
	END

/* Insert into incidentAttachment - not required FK*/
/*IF (@txaAttachments IS NOT NULL)*/ /* insert first incidentAttachment */
/*	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
		BEGIN TRANSACTION;
			IF @newIID IS NOT NULL  /* check that incident exists */
				BEGIN
					INSERT INTO dbo.incidentAttachment(
						attName,
						attType,
						attExt,
						IID)
						VALUES (
						@txaAttachments,
						@hdnAttType,
						@hdnAttExt,
						@newIID);
				END
		COMMIT TRANSACTION;
	END */
	
	SET @insertResults = @newIID;
	RETURN @insertResults"
