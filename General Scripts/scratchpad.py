# -*- coding: utf-8 -*-
"""
Created on Sun Dec 31 22:57:38 2023

@author: sucre
"""

seeds = 75
grams = 2.7
#print(seeds/grams)


shumann = 7.83
#print((shumann**4)*8192)


length_m = 2.434
length_in = 95.66929
Hz = 30791935.74776832
MHz = 30.79

big_fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309, 7540113804746346429, 12200160415121876738, 19740274219868223167, 31940434634990099905, 51680708854858323072, 83621143489848422977, 135301852344706746049, 218922995834555169026]

def array_to_dict(arr):
    return {i: arr[i] for i in range(len(arr))}

def fibonacci_iterative(n):
    """
    Parameters
    ----------
    n : int
        number of iterations to do.

    Returns
    -------
    fib_sequence : array of ints
        the values in the fibonacci sequence for the given iterations.

    """
    fib_sequence = [0, 1]
    for i in range(2, n):
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
    return fib_sequence

def print_array_of_arrays_to_file(array_of_arrays, filename):
    with open(filename, 'w') as file:
        for array in array_of_arrays:
            file.write(' '.join(map(str, array)) + '\n')


# Calculate the first 100 Fibonacci numbers
# fibonacci_numbers = fibonacci_iterative(100)
# print(fibonacci_numbers)
#big_fib_distance = [1, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309, 7540113804746346429, 12200160415121876738, 19740274219868223167, 31940434634990099905, 51680708854858323072]
big_fib_distance = []
big_fib_dict = array_to_dict(big_fib)

def read_distances(outer_arr, values_dict, iterations):
    distances = []
    if iterations > 0:
        for i, val in values_dict.items():
            if len(values_dict) > (i+2):
                nex = values_dict[i+1]
                distances.append(nex - val)

        outer_arr.append(distances)
        return read_distances(outer_arr, array_to_dict(distances),iterations-1)
    else:
        return outer_arr

arr_holder = []
distances = read_distances(arr_holder, big_fib_dict, 50)
print_array_of_arrays_to_file(distances, 'fibonacci.distance.arrays.txt')